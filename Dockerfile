# Dockerfile для Django приложения с использованием Poetry
# Базовый образ: официальный Python образ на основе slim (минималистичный)
# ОБНОВЛЕНО: Используем Python 3.10 (минимальная требование для Django 5.2.6)
FROM python:3.10-slim

# Устанавливаем системные зависимости, необходимые для сборки Python пакетов и работы с PostgreSQL
# apt-get update - обновляет список доступных пакетов
# apt-get install -y - устанавливает пакеты без подтверждения
# curl - для загрузки Poetry
# gcc - компилятор C, необходим для сборки некоторых Python пакетов
# libpq-dev - библиотеки для работы с PostgreSQL (требуются для psycopg2)
# && rm -rf /var/lib/apt/lists/* - очищает кэш apt для уменьшения размера образа
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Устанавливаем Poetry - менеджер зависимостей для Python
# curl -sSL - загружает скрипт установки без лишнего вывода
# | python3 - - передает скрипт на выполнение Python
RUN curl -sSL https://install.python-poetry.org | python3 -

# Добавляем Poetry в переменную PATH, чтобы можно было вызывать poetry из любой директории
# /root/.local/bin - путь, куда Poetry устанавливается по умолчанию
ENV PATH="/root/.local/bin:$PATH"

# Устанавливаем рабочую директорию внутри контейнера
# Все последующие команды будут выполняться относительно этой директории
WORKDIR /app

# Копируем файлы зависимостей в контейнер
# pyproject.toml - файл с метаданными и зависимостями проекта
# poetry.lock - файл с точными версиями зависимостей (обеспечивает воспроизводимость)
COPY pyproject.toml poetry.lock ./

# Настраиваем Poetry для работы в Docker окружении
# virtualenvs.create false - отключает создание виртуального окружения (используем системный Python)
# Это важно для Docker, так как мы работаем в изолированном окружении
RUN poetry config virtualenvs.create false

# Устанавливаем зависимости проекта с помощью Poetry
# --no-root - не устанавливает сам проект (только зависимости)
# --no-interaction - не задает интерактивных вопросов
# --no-ansi - отключает цветной вывод (для чистоты логов)
# ОБНОВЛЕНО: Устанавливаем ТОЛЬКО production зависимости (без dev-зависимостей)
RUN poetry install --only main --no-interaction --no-ansi

# Копируем весь исходный код проекта в контейнер
# Копируем из src/ в /app, так как используется src-layout структура
# ← ИСПРАВЛЕНО: Копируем из папки src, а не из корня
COPY src/ .


# Открываем порт 8000 для доступа к Django приложению
# EXPOSE - это документация, фактическое пробрасывание портов делается в docker run или docker-compose
EXPOSE 8000

# Команда по умолчанию для запуска контейнера
# Будет переопределена в docker-compose.yml для production использования
# ОБНОВЛЕНО: Исправлен путь к manage.py (должен быть в /app, а не /src)
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
